package org.nsu.fit.tests.api;

import io.qameta.allure.Feature;
import io.qameta.allure.Severity;
import io.qameta.allure.SeverityLevel;
import org.nsu.fit.services.rest.RestClient;
import org.nsu.fit.services.rest.data.AccountTokenPojo;
import org.nsu.fit.services.rest.data.CustomerPojo;
import org.nsu.fit.services.rest.data.TopUpBalancePojo;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

public class TopUpBalanceTest {
    private static AccountTokenPojo adminToken;
    private static AccountTokenPojo customerToken;
    private static CustomerPojo customerPojo;

    private TopUpBalancePojo topUpBalancePojo;

    @BeforeClass
    public static void before() {
        adminToken = new RestClient().authenticate("admin", "setup");
        customerPojo = new RestClient().createAutoGeneratedCustomer(adminToken);
        customerToken = new RestClient().authenticate(customerPojo.login, customerPojo.pass);
    }

    @Test(description = "Top up balance.")
    @Severity(SeverityLevel.BLOCKER)
    @Feature("Top up balance feature.")
    public void topUpBalanceTest() {
        topUpBalancePojo = new RestClient().topUpBalance(customerToken, customerPojo.id);
    }

    @Test(description = "Check balance after top up.", dependsOnMethods = "topUpBalanceTest")
    @Severity(SeverityLevel.BLOCKER)
    @Feature("Top up balance feature.")
    public void checkBalanceAfterTopUpTest() {
        Assert.assertTrue(new RestClient().getCustomers(adminToken).stream()
                .filter(c -> c.id.equals(customerPojo.id))
                .allMatch(c -> c.balance == topUpBalancePojo.money));
    }
}
